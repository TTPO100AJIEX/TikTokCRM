import config from "common/configs/config.json" assert { type: "json" };

import ejs from 'ejs';
import view from "@fastify/view";
import f_static from "@fastify/static";
import compress from "@fastify/compress";
import html_minifier from "html-minifier";

async function register(app, options)
{
    /*----------------------------------COMPRESS----------------------------------*/
    await app.register(compress, { global: true, threshold: 1024 });
    



    /*----------------------------------STATIC----------------------------------*/
    await app.register(f_static, {
        root: options.static_directory,
        prefix: "/static",

        acceptRanges: true,
        cacheControl: true,
        dotfiles: 'ignore',
        etag: true,
        extensions: false,
        immutable: false,
        lastModified: true,
        maxAge: config.stage == "testing" ? 0 : 604800000,

        preCompressed: true,
        wildcard: false,
        index: false,
        allowedPath: (pathname, root) =>
        {
            return(pathname.startsWith("/css") || pathname.startsWith("/js") || pathname.startsWith("/images")
                    || pathname == "robots.txt" || pathname == "sitemap.xml" || pathname == "favicon.ico" || pathname == "apple-touch-icon.png")
        }
    });
    


    
    /*----------------------------------EJS----------------------------------*/
    app.register(view, {
        engine: { ejs: ejs },
        production: config.stage != "testing",
        options:
        {
            async: false,
            views: [ options.views_directory ],
            useHtmlMinifier: config.stage != "testing" ? html_minifier : false,
            htmlMinifierOptions:
            {
                "caseSensitive": true,
                "collapseBooleanAttributes": true,
                "collapseInlineTagWhitespace": true,
                "collapseWhitespace": true,
                "conservativeCollapse": false,
                "continueOnParseError": false,
                "decodeEntities": true,
                "html5": true,
                "includeAutoGeneratedTags": true,
                "keepClosingSlash": false,
                "minifyCSS": true,
                "minifyJS": true,
                "minifyURLs": false,
                "preserveLineBreaks": false,
                "preventAttributesEscaping": false,
                "processConditionalComments": false,
                "processScripts": [],
                "quoteCharacter": "\"",
                "removeAttributeQuotes": false,
                "removeComments": true,
                "removeEmptyAttributes": true,
                "removeEmptyElements": false,
                "removeOptionalTags": false,
                "removeRedundantAttributes": false,
                "removeScriptTypeAttributes": true,
                "removeStyleLinkTypeAttributes": true,
                "removeTagWhitespace": false,
                "sortAttributes": true,
                "sortClassName": true,
                "trimCustomFragments": false,
                "useShortDoctype": true
            }
        },
        propertyName: "render",
        root: options.views_directory,
        includeViewExtension: false,
        defaultContext:
        {
            config: config
        }
    });

    app.decorateRequest("locale", "EN");
    app.decorateRequest("theme", "default");
    app.addHook("onRequest", async (req, res) =>
    {
        res.locals = { req, res, cspNonce: res.cspNonce };
    });
    


    /*----------------------------------ERRORS----------------------------------*/
    const errors = {
        "200":
        {
            "title": "200 OK",
            "message": "The action has been completed! \n You will be redirected back in a second!",
            "page_description": "200 The request has been completed."
        },
    
        "400":
        {
            "title": "400 Bad Request",
            "message": "The request is incorrect! \n Try again!",
            "page_description": "400 Bad Request error page."
        },
        "401":
        {
            "title": "401 Unauthorized",
            "message": "Authentication error! \n Log in and try again!",
            "page_description": "401 Unauthorized error page."
        },
        "402":
        {
            "title": "402 Payment Required",
            "message": "The requested resourse is available only after purchase! \n Fulfill the payment and try again!",
            "page_description": "402 Payment Required error page."
        },
        "403":
        {
            "title": "403 Forbidden",
            "message": "You are not allowed to access this resourse! \n Contact the support if you are sure this is a mistake!",
            "page_description": "403 Forbidden error page."
        },
        "404":
        {
            "title": "404 Not Found",
            "message": "The requested resourse has not been found! \n Make sure the url is correct!",
            "page_description": "404 Not Found error page."
        },
        "429":
        {
            "title": "429 Too Many Requests",
            "message": "You are sending too many requests! \n Try again later!",
            "page_description": "429 Too Many Requests error page."
        },
    
        "500":
        {
            "title": "500 Internal Server Error",
            "message": "An unexpected error occurred! \n Try again later!",
            "page_description": "500 Internal Server Error error page."
        },
        "502":
        {
            "title": "502 Bad Gateway",
            "message": "Interaction error: bad gateway! \n Try again later!",
            "page_description": "502 Bad Gateway error page."
        },
        "503":
        {
            "title": "503 Service Unavailable",
            "message": "The server is overloaded! \n Try again later!",
            "page_description": "503 Service Unavailable error page."
        },
        "504":
        {
            "title": "504 Gateway Timeout",
            "message": "Interaction error! \n Try again later!",
            "page_description": "504 Gateway Timeout error page."
        },
        "508":
        {
            "title": "508 Loop Detected",
            "message": "An unexpected error occurred! \n Try again later!",
            "page_description": "508 Loop Detected error page."
        }
    };
    function parseError(error)
    {
        if (Number.isInteger(error)) return parseError({ statusCode: error });
        if (typeof error != "object") return parseError({ message: error.toString() });
        const statusCode = (error.statusCode in errors) ? error.statusCode : 500;
        const title = error.title ?? errors[statusCode]?.title;
        const message = error.message ?? errors[statusCode]?.message;
        return { statusCode, title, message };
    }
    app.setErrorHandler((error, req, res) =>
    {
        if (config.stage == "testing") console.error(error);

        const error_response = parseError(error);
        if (req.routeOptions.config.api) return res.status(error_response.statusCode).send(error_response);
        return res.status(error_response.statusCode).render("error.ejs", { ...error_response, req, res });
    });
    app.setNotFoundHandler({ preHandler: app.rateLimit({ max: 25, timeWindow: 60000, ban: 40 }) }, (req, res) => { throw 404; });
}

import plugin from 'fastify-plugin';
export default plugin(register, { name: 'response', encapsulate: false });