CREATE TYPE STREAMER_STATUS AS ENUM ('CONTRACT', 'PREPARATION', 'ACTIVE', 'PAUSED', 'FIRED');
CREATE TYPE STREAMER_CATEGORY AS ENUM ('OUR', 'BACKSTAGE', 'OUTSIDE', 'ETC');
CREATE TYPE STREAMER_STREAM AS ENUM ('STREAM_1', 'STREAM_2', 'STREAM_3');

CREATE TABLE streamers
(
    id INT GENERATED ALWAYS AS IDENTITY PRIMARY KEY,
    avatar_url URL NOT NULL,
    unique_id TEXT NOT NULL,
    tiktok_id BIGINT NOT NULL,
    follower_count INT NOT NULL CHECK (follower_count >= 0),
    status STREAMER_STATUS NOT NULL,
    category STREAMER_CATEGORY NOT NULL,
    stream STREAMER_STREAM NOT NULL,
    streamer_group STREAMER_GROUP NOT NULL,
    first_stream TIMESTAMPTZ,
    last_stream TIMESTAMPTZ,
    pledge INT NOT NULL CHECK (pledge >= 0),
    created TIMESTAMPTZ NOT NULL DEFAULT NOW(),
    updated TIMESTAMPTZ NOT NULL DEFAULT NOW(),
    last_processed TIMESTAMPTZ NOT NULL DEFAULT NOW(),
    stream_start TIMESTAMPTZ
);

CREATE INDEX streamers_last_processed_index ON streamers(last_processed);


CREATE FUNCTION streamers_sync_updated() RETURNS TRIGGER
LANGUAGE plpgsql VOLATILE LEAKPROOF STRICT PARALLEL SAFE AS $$
BEGIN
	NEW.updated = NOW();
	RETURN NEW;
END $$;
CREATE TRIGGER streamers_sync_updated_trigger BEFORE UPDATE ON streamers FOR EACH ROW EXECUTE FUNCTION streamers_sync_updated();